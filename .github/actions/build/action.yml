name: 'Build and deploy release'
inputs:
  version:
    description: 'The new version'
    required: true
  release_body:
    description: 'release body'
    required: true

runs:
  using: "composite"
  steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup QEMU
      uses: docker/setup-qemu-action@v3.2.0

    - name: Setup Docker buildx
      uses: docker/setup-buildx-action@v3.7.1

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5.5.1
      with:
        images: |
          docker.io/thib3113/parsedmarc
          ghcr.io/${{ github.repository_owner }}/parsedmarc
        tags: |
          type=raw,value=latest,enable={{is_default_branch}}
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}

    - name: Login to Github Container Registry
      uses: docker/login-action@v3.3.0
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Login to Docker Hub
      uses: docker/login-action@v3.3.0
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push image
      id: build-and-push
      uses: docker/build-push-action@v6.9.0
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        push: true

    - name: Check for new release and create PR if needed
      id: release-infos
      uses: actions/github-script@v7.0.1
      env:
        TAG_VERSION: ${{ inputs.version }}
        RELEASE_BODY: ${{ inputs.release_body }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |

            await exec.exec("git", ["tag", process.env.TAG_VERSION]);
            await exec.exec("git", ["push", "origin", "tag", process.env.TAG_VERSION]);


            await github.rest.repos.createRelease({
              draft: false,
              generate_release_notes: false,
              name: process.env.TAG_VERSION,
              owner: context.repo.owner,
              prerelease: false,
              repo: context.repo.repo,
              tag_name: process.env.TAG_VERSION,
              body: process.env.RELEASE_BODY
            });